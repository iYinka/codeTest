# version: 2.1

# jobs:
#     save_hello_world_output:
#         docker:
#             - image: circleci/node:13.8.0
#         steps:
#             - run: echo "hello world" > ~/output.txt
#             - persist_to_workspace:
#                   root: ~/
#                   paths:
#                       - output.txt

#     print_output_file:
#         docker:
#             - image: circleci/node:13.8.0
#         steps:
#             - attach_workspace:
#                   at: ~/
#             - run: cat ~/output.txt

# workflows:
#     my_workflow:
#         jobs:
#             - save_hello_world_output
#             - print_output_file:
#                   requires:
#                       - save_hello_world_output

# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
# version: 2.1
# orbs:
#     # Declare a dependency on the welcome-orb
#     welcome: circleci/welcome-orb@0.4.1
# jobs:
#     build:
#         docker:
#             - image: cimg/base:2020.01
#         steps:
#             - checkout
#             - run:
#                   name: "echo an env var that is part of our project"
#                   command: |
#                       echo $MY_NAME

# print_hello:
#     docker:
#         - image:  cimg/base:2020.01
#     steps:
#         - run: echo helo

#     print_world:
#         docker:
#             - image: cimg/base:2020.01
#         steps:
#             - run: echo world
# workflows:
#     # Name the workflow "welcome"
#     welcome:
#         # Run the welcome/run job in its own container
#         jobs:
#             - print hello
#             - print world:
#                   requires:
#                       - print hello

#JOB FAILURE
# version: 2.1

# jobs:
#   my_job:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - run: exit 1
#       - run:
#           name: on error
#           command: echo "Hello Error!"
#           when: on_fail

# workflows:
#   my_workflow:
#     jobs:
#       - my_job

#Sharing Files
#version: 2.1
# jobs:
#   save_hello_world_output:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - run: echo "hello world" > ~/output.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - output.txt

#   print_output_file:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - attach_workspace:
#           at: ~/
#       - run: cat ~/output.txt

# workflows:
#   my_workflow:
#     jobs:
#       - save_hello_world_output
#       - print_output_file:
#           requires:
#             - save_hello_world_output

#Anchors(&) and Aliases(*), Commands
# version: 2.1

# commands:
#   print_pipeline_id:
#     steps:
#       - run: echo ${CIRCLE_WORKFLOW_ID}

# jobs:
#   my_job:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - print_pipeline_id

# workflows:
#   my_workflow:
#     jobs:
#       - my_job

#CI PIPELINE

# # *****START: This Line Works well*****#
# version: 2.1

# jobs:
#     build:
#         docker:
#             - image: circleci/node:13.8.0
#         steps:
#             - checkout
#             - run: npm install
#             - run: npm install react-dom
#             - save_cache:
#                   key: dependency-cache-{{ checksum "package-lock.json" }}
#                   paths:
#                       - ./node_modules
#     test:
#         docker:
#             - image: circleci/node:13.8.0
#         steps:
#             - checkout
#             - run: npm i
#             # - run: npm run test
#             - restore_cache:
#                   key: dependency-cache-{{ checksum "package-lock.json" }}

#     analyze:
#         docker:
#             - image: circleci/node:13.8.0
#         steps:
#             - checkout
#             - run: npm audit fix

# workflows:
#     my_workflow:
#         jobs:
#             - build
#             - test:
#                   requires:
#                       - build
#             - analyze:
#                   requires:
#                       - test

# # ******* END: This Line Works well******#

version: 2.1
# Use a package of configuration called an orb.
commands:
    # Exercise - Rollback
    destroy_environment:
        steps:
            - run:
                  name: Destroy environment
                  # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
                  # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
                  when: on_fail
                  command: |
                      aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
    create_infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Create Cloudformation Stack
                  command: |
                      aws cloudformation deploy \
                        --template-file template.yml \
                        --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                        --region us-east-1
            - run: return 1
            - destroy_environment

    # # Exercise: Config and Deployment
    # configure_infrastructure:
    #     docker:
    #         - image: python:3.7-alpine3.11
    #     steps:
    #         - checkout
    #         - add_ssh_keys:
    #               # You can get this ID in the section where you registered the SSH Key
    #               fingerprints:
    #                   ["d3:78:08:20:e3:bd:07:43:0a:04:8a:9a:de:16:b9:fc"]
    #         - run:
    #               name: Install Ansible
    #               command: |
    #                   apk add --update ansible
    #         - run:
    #               name: Run Playbook and Configure server
    #               command: |
    #                   ansible-playbook -i inventory.txt main.yml
    # # Exercise: Smoke Testing
    # smoke_test:
    #     docker:
    #         - image: alpine:latest
    #     steps:
    #         - run: apk add --update curl
    #         - run:
    #               name: smoke test
    #               command: return 1
    #               #   command: |
    #               #       URL="https://blog.udacity.com/"
    #               #       # Test if website exists
    #               #       if curl -s --head ${URL}
    #               #       then
    #               #           return 0
    #               #       else
    #               #           return 1
    #               #       fi
    #         - destroy_environment

    # Promote To Production
    # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
    # Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
    create_and_deploy_front_end:
        docker:
            - image: amazon/aws-cli
        steps:
            - checkout
            - run:
                  name: Execute bucket.yml - Create Cloudformation Stack
                  command: |
                      aws cloudformation deploy \
                      --template-file bucket.yml \
                      --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
                      --parameter-overrides MyBucketName="my-${CIRCLE_WORKFLOW_ID:0:7}"
                  # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
            - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
workflows:
    # Name the workflow
    myWorkflow:
        jobs:
            - create_infrastructure
            # - configure_infrastructure
            # - smoke_test
#
